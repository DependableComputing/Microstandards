<?xml version="1.0" encoding="UTF-8"?>
<argument>
  <properties>
    <title>
      <![CDATA[New Argument]]>
    </title>
    <author>
      <![CDATA[]]>
    </author>
    <version>
      <![CDATA[]]>
    </version>
    <date>
      <![CDATA[]]>
    </date>
    <status>
      <![CDATA[]]>
    </status>
    <prefix>
      <![CDATA[]]>
    </prefix>
    <confidence>
      <![CDATA[false]]>
    </confidence>
    <note>
      <![CDATA[]]>
    </note>
  </properties>

  <gsn>
    <g
        id="__gsn__17dbfe37663"
        color="#ffffff"
        name="Mirroring Implementation">
      The implementation of data types and functions is practicably correct with respect to their specification using a set of mirroring rules.

      <c
          id="__gsn__17ec1a86d93"
          color="#ffffff"
          name="Mirroring">
        Each operation of the specification applies the semantically equivalent operation in the source language, as well as correspondence of data types, save the defined differences under {retrenchment rules}.
      </c>

      <s
          id="__gsn__17ebba5cae6"
          color="#ffffff"
          name="Strategy">
        Through a mirroring implementation of the specification in SPARK Ada, such that all possible data value computations remain in implementation range and supporting proof of invariant conditions on the implementation as specified in the specification.

        <c
            id="__gsn__17dc00b1aea"
            color="#ffffff"
            name="[practicably correctly synthesized]">
          Careful implementation of the Spark Ada source code from the formal specification has been produced, using Spark Ada proof against carefully mapped specification to post-conditions as a verification technique.
        </c>

        <a
            id="__gsn__17ebba849ab"
            color="#ffffff"
            name="Implementation Approach using SPARK Ada">
          The developers write SPARK Ada code to mirror the functions, expressions and operational sequences of the specification, and utilize the specification as precondition/postcondition invariants to prove on the implementation.
        </a>

        <g
            id="__gsn__17ebba5f918"
            color="#ffffff"
            name="Practicably Correct, Mirroring Implementation">
          The implementation has been {practicably correctly synthesized} from the formal specification into correct implementation.

          <s
              id="__gsn__17dbfe3944c"
              color="#ffffff"
              name="Strategy">
            Through mirroring functional and type units with required proofs from Spark Ada discharged

            <a
                id="__gsn__17dbfe3944d"
                color="#ffffff"
                name="Assumption">
              This sub-argument applies Spark Ada concept of VS discharge where VCs are verification conditions that must be proven.
            </a>

            <j
                id="__gsn__17dbfe3944e"
                color="#ffffff"
                name="Justification">
              In Spark Ada, one writes a program in Ada with well-defined Ada types and pre and postconditions on procedures and functions. Spark Ada then generates the proofs that are sufficient to prove correctness of the Ada source code in meeting those pre and postconditions and attempts to discharge them.
            </j>

            <g
                id="__gsn__17dbfe3944f"
                color="#ffffff"
                name="Correct Value Type Mirroring">
              The implementation of specification part {-Part-}'s value types correctly implement corresponding types under the defined retrenchment rules.

              <s
                  id="__gsn__17dbfe39452"
                  color="#ffffff"
                  name="Strategy">
                By arguing over components of the Spark Ada mapping from PVS data types.

                <g
                    id="__gsn__17dbfe39453"
                    color="#ffffff"
                    name="Correct Type Data Model">
                  The data model of types is a correct representation of the PVS data types utilized in the formal specification.

                  <s
                      id="__gsn__17dbfe39454"
                      color="#ffffff"
                      name="Strategy">
                    Completeness, implementing correctness, and non-extraneous properties.

                    <g
                        id="__gsn__17dbfe39455"
                        color="#ffffff"
                        name="Correct Data Type Mirroring">
                      The data types of PVS are mirrored properly in Spark Ada.

                      <s
                          id="__gsn__17dbfe39456"
                          color="#ffffff"
                          name="Strategy">
                        By mapping model developed for mapping from PVS to SPARK Ada data types.

                        <g
                            id="__gsn__17dbfe39457"
                            color="#ffffff"
                            name="Primitive Type Conversion Matches Defined Retrenchment Rules">
                          The primitive types map correctly under the defined retrenchment rules,.

                          <c
                              id="__gsn__17dbfe39458"
                              color="#ffffff"
                              name="Example">
                            integers in PVS map correctly to the definition of 32 or 64-bit or larger integers in SPARK Ada.
                          </c>

                          <e
                              id="__gsn__17dee98c732"
                              color="#ffffff"
                              name="Review">
                            Team review that each primitive type of the data entity is mapped correctly. See "evidence-fre.xlsx!Mirrored Data Types#Primitive Type Conversion Matches".
                          </e>
                        </g>

                        <g
                            id="__gsn__17dbfe39459"
                            color="#ffffff"
                            name="Standard Structures are Handled Correctly">
                          All fields match by type and subtype

                          <e
                              id="__gsn__17dee97f458"
                              color="#ffffff"
                              name="Review">
                            Team review that each standard structure is mapped correctly. See "evidence-fre.xlsx!Mirrored Data Types#Standard Structures Handled Correctly".
                          </e>
                        </g>

                        <g
                            id="__gsn__17dbfe3945a"
                            color="#ffffff"
                            name="Anonymous Records are Handled Correctly">

                          <e
                              id="__gsn__17dee96b984"
                              color="#ffffff"
                              name="Review">
                            Team review that each anonymous record structure is mapped correctly. See "evidence-fre.xlsx!Mirrored Data Types#Anonymous Records Handled Correctly".
                          </e>

                          <comment
                              id="__gsn__17dbfe3945b"
                              color="#ffffff"
                              name="Comment">
                            Issue 10
                          </comment>
                        </g>

                        <g
                            id="__gsn__17dbfe3945c"
                            color="#ffffff"
                            name="List Structures are Handled Correctly">
                          PVS lists are defined properly as Spark Ada data types.

                          <e
                              id="__gsn__17dc0341b4d"
                              color="#ffffff"
                              name="Review">
                            Team review that each list structure is mapped correctly. See "evidence-fre.xlsx!Mirrored Data Types#List Structures Handled Correctly".
                          </e>

                          <comment
                              id="__gsn__17dbfe3945d"
                              color="#ffffff"
                              name="Comment">
                            issue 10
                          </comment>
                        </g>
                      </s>
                    </g>

                    <g
                        id="__gsn__17dbfe39469"
                        color="#ffffff"
                        name="Complete and Non-Extraneous">
                      All Spark Ada data declaration models all and only PVS data types.

                      <s
                          id="__gsn__17dbfe3946a"
                          color="#ffffff"
                          name="Strategy">
                        By showing bi-directional traceability

                        <g
                            id="__gsn__17dbfe3946b"
                            color="#ffffff"
                            name="Bidirectional Traceability">
                          All and only PVS data types map to all Spark Ada declared data types and predicates for the implementation of the specification part, {-Part-}.

                          <g
                              id="__gsn__17defe87133"
                              color="#ffffff"
                              name="Forward Tracing">
                            All data types of the specification part are mirrored in its implementation.

                            <e
                                id="__gsn__17defe913e6"
                                color="#ffffff"
                                name="Forward Tracing">
                              A table showing how each declared data type of the specification corresponds to checked implementation. See "evidence-fre.xlsx!Mirrored Data Types".
                            </e>

                            <e
                                id="__gsn__17defe9253a"
                                color="#ffffff"
                                name="Completenes Review">
                              Team review indicates that all data types of the specification part are mirrored in the implementation and present in the table. See "evidence-fre.xlsx!Mirrored Data Types#All Types Mirrored Sign-Off"
                            </e>
                          </g>

                          <g
                              id="__gsn__17defe87474"
                              color="#ffffff"
                              name="Backwards Tracing">
                            Each data type of the implementation corresponds to a mirrored data type of the specification.

                            <e
                                id="__gsn__17dbfe3946d"
                                color="#ffffff"
                                name="Tracing">
                              A table showing how each declared data type of the specification corresponds to checked implementation. See "evidence-fre.xlsx!Mirrored Data Types#No Extraneous Types Review Sign-Off".
                            </e>
                          </g>
                        </g>
                      </s>
                    </g>
                  </s>
                </g>

                <g
                    id="__gsn__17dbfe3945e"
                    color="#ffffff"
                    name="Correct Type Predicates">
                  A correct and complete model of type predicates in SPARK Ada is applied.

                  <s
                      id="__gsn__17dbfe3945f"
                      color="#ffffff"
                      name="Strategy">
                    For the two types of type predicates required

                    <g
                        id="__gsn__17dbfe39460"
                        color="#ffffff"
                        name="Constraints from PVS">
                      Correct and complete definition of all PVS constraints (predicates) and type predicates in SPARK Ada.

                      <s
                          id="__gsn__17f09179114"
                          color="#ffffff"
                          name="Strategy">
                        By implicating property of mapping

                        <g
                            id="__gsn__17dbfe39461"
                            color="#ffffff"
                            name="Correct and Complete Type Predicate Mapping">
                          All type predicates defined in PVS have been defined as type predicates in SPARK Ada on the appropriate data types.

                          <e
                              id="__gsn__17dbfe39462"
                              color="#ffffff"
                              name="Inspection and Review">
                            Inspection and review by comparison of each Spark Ada defined type such that for each predicate defined in PVS comment section maps to a predicate in the associated Spark Ada data type.
                          </e>
                        </g>
                      </s>
                    </g>

                    <g
                        id="__gsn__17dbfe39463"
                        color="#ffffff"
                        name="Implications of Range Retrenchment">
                      Correct and complete implications limiting use of complex types to valid ranges of primitives under retrenchment are defined for all data types.

                      <s
                          id="__gsn__17dbfe39464"
                          color="#ffffff"
                          name="Strategy">
                        By a property of the SPARK Pro tools that does not arise.

                        <a
                            id="__gsn__17dee79f142"
                            color="#ffffff"
                            name="Assumption">
                          All VCs are discharged.
                        </a>

                        <g
                            id="__gsn__17dbfe39465"
                            color="#ffffff"
                            name="VCs generated for all potential Overflows and Underflows">
                          If ranges are not constrained under produced retrenchement rules, VCs will be generated by SPARK Pro indicating potential overflows and/or underflows.

                          <e
                              id="__gsn__17dbfe39466"
                              color="#cdcdcd"
                              name="Spark Ada Tool Property">
                            SPARK Pro creates VCs for all potential data overflows and underflows.
                          </e>
                        </g>
                      </s>
                    </g>
                  </s>
                </g>
              </s>
            </g>

            <g
                id="__gsn__17dbfe3946e"
                color="#ffffff"
                name="Correct Operation Sequence Implementation">
              All executable sequences of operations defined in the specification part {-Part-} are correctly implemented by the implementation as source code with postconditions as defined by the specification.

              <s
                  id="__gsn__17dbfe3946f"
                  color="#ffffff"
                  name="Strategy">
                Show that each pure functional unit of the PVS formal operational specification part {-Part-} has been implemented by mirroring its operations to the extent possible, and further proven against its PVS specification as postconditions in Spark Ada.

                <g
                    id="__gsn__17dbfe39470"
                    color="#ffffff"
                    name="Successful Operational Mapping">
                  The function as implemented mirrors the inputs and return types (under types defined under retrenchment rules) and the operational sequence of the defined function in the specification.

                  <j
                      id="__gsn__17dbfe39471"
                      color="#ffffff"
                      name="Justification">
                    Note, this is a helper claim. The proof of pre and postconditions is sufficient. But this lends credence to function-level synthesis correctness.
                  </j>

                  <s
                      id="__gsn__17dbfe39472"
                      color="#ffffff"
                      name="Strategy">
                    By showing that a series of translation rules have been applied correctly and a reviewer agrees with the overall function mapping results.

                    <c
                        id="__gsn__17dbfe39473"
                        color="#ffffff"
                        name="Translation Rules">
                      A series of rules that map from operations of PVS to operations of Spark Ada.
                    </c>

                    <g
                        id="__gsn__17dbfe39474"
                        color="#ffffff"
                        name="Translation Agreement from Team">
                      Translation rules have been applied correctly

                      <e
                          id="__gsn__17dbfe39475"
                          color="#ffffff"
                          name="Evidence">
                        Through peer review of the correct application of each translation rule on each function. See "evidence-fre.xlsx!Mirrored Functions#Translation Team Review Sign-Off".
                      </e>
                    </g>

                    <g
                        id="__gsn__17dbfe39476"
                        color="#ffffff"
                        name="Functional Matching Agreement from Team">
                      Peers agree that the functions as implemented is the functions of the operational specification.

                      <e
                          id="__gsn__17dbfe39477"
                          color="#ffffff"
                          name="Peer Review">
                        Signoff by peer on review of the function as implemented in source code as compared to the function as defined in the formal specification. See "evidence-fre.xlsx!Mirrored Functions#Function Team Review Sign-Off".
                      </e>
                    </g>
                  </s>
                </g>

                <g
                    id="__gsn__17dbfe39478"
                    color="#ffffff"
                    name="Successful Pre and Postcondition Encoding">
                  The pre and postconditions of the specifiation {-Part-} are succesfully encoded in the preambles of function definitions in the SPARK language.

                  <e
                      id="__gsn__17dbfe39479"
                      color="#ffffff"
                      name="PVS to Spark Ada Condition Check">
                    Check by peer that the pre and postcondition representation of the Spark Ada PVS specification of each function is complete and correct. See "evidence-fre.xlsx!Mirrored Functions#Proof Conditions Team Review Sign-Off".
                  </e>
                </g>

                <g
                    id="__gsn__17dbfe3947a"
                    color="#ffffff"
                    name="No Extraneous Implementation">
                  No implementation code exists that does not directly implement some set of sequences of executable operations of the specification part {-Part-}.

                  <g
                      id="__gsn__17dbfe3947b"
                      color="#ffffff"
                      name="Code Traceability">
                    All implementation code directly traces to a function of the PVS formal specification.

                    <e
                        id="__gsn__17dbfe3947c"
                        color="#ffffff"
                        name="Code Trace">
                      Verification and sign-off that all code of the implementation is in a function labelled as implementing a given function of the specification. See "evidence-fre.xlsx!Mirrored Functions#No Extraneous Functions Review Sign-Off".
                    </e>
                  </g>
                </g>

                <g
                    id="__gsn__17deffccefb"
                    color="#ffffff"
                    name="Complete Function Implementation">
                  All functions of the specification part have an implementation.

                  <e
                      id="__gsn__17deffd25b5"
                      color="#ffffff"
                      name="Specification Trace">
                    Verification and sign-off that all functions of the specification part are implemented in its implementation. See "evidence-fre.xlsx!Mirrored Functions#Complete Functions Team Review Sign-Off".
                  </e>
                </g>
              </s>
            </g>
          </s>
        </g>

        <g
            id="__gsn__17ef97336d5"
            color="#ffffff"
            name="Acceptable Values on Implementation">
          Possible values on implementation are sufficient for general mirroring correctness under the retrenchment models.

          <g
              id="__gsn__17ef97056d0"
              color="#ffffff"
              name="Acceptable Finite Ranges Without Overflow and Underflow">
            The retrenchment mapping will allow all required input and output without underflow or overflow of computable values.

            <j
                id="__gsn__17ef97056d1"
                color="#ffffff"
                name="Justification">
              Here we show that the specification part appears to only accumulate reasonable error in output values.Higher up in the larger argument, it is shown that further verification of {interface contract} guarantees has been verified under the implementation as a whole.
            </j>

            <s
                id="__gsn__17ef97056d2"
                color="#ffffff"
                name="Strategy">
              Through showing values in the implementation suffer no unreasonable boundary limitations nor error against general-case use.

              <g
                  id="__gsn__17ef97056d3"
                  color="#ffffff"
                  name="Acceptable Implementation Input Ranges">
                The input ranges required by the formally specification part {-Part-} are representable in the data types of the implementation language and platform under the defined synthesis mapping.

                <e
                    id="__gsn__17ef97056d4"
                    color="#ffffff"
                    name="Input Range and Accuracy Checking">
                  A check that the range and accuracy requirement of each input is satisfied by the implementation and platform representation range and accuracy for the applied data type of each input. For structures, this is determined recursively for sub-structure types. See "evidence-fre.xlsx#Retrenchment Checks#Retrenchment Rules Satisfy Input Ranges".
                </e>
              </g>

              <g
                  id="__gsn__17ef97056d5"
                  color="#ffffff"
                  name="No Underflow or Overflow">
                The value ranges of the specification part {-Part-} are such that sound bounds indicate no overflow, underflow of computed values will occur in implementation execution under the defined synthesis mapping.

                <e
                    id="__gsn__17ef97056d6"
                    color="#ffffff"
                    name="Absence of Overflow and Underflow">
                  Automatic checking or proof that all sound bounds ranges fall within representable value range overflow and underflow bounds for computable value types. See "evidence-fre.xlsx#Retrenchment Checks#Absence of Overflow and Underflow".
                </e>
              </g>
            </s>
          </g>

          <g
              id="__gsn__17ef97328e1"
              color="#ffffff"
              name="Acceptable Finite Structures">
            The finite limitations on the size of structures storable by the program is acceptable.

            <e
                id="__gsn__17f091bf91e"
                color="#ffffff"
                name="Maximum Structure Size Check">
              .
            </e>

            <comment
                id="__gsn__17ef97328e2"
                color="#ffffff"
                name="TBD">
              default text
            </comment>
          </g>
        </g>

        <public-goal
            id="__gsn__17ebba69438"
            color="#ffffff"
            name="Addressed All VCs">
          All {verification condition}s generated by SPARK Ada in support of applied preconditions and postconditions have been addressed.

          <c
              id="__gsn__17ebba69439"
              color="#ffffff"
              name="[VCs]">
            The verification conditions generated for proof by SPARK Ada.
          </c>

          <s
              id="__gsn__17f091a2876"
              color="#ffffff"
              name="Strategy">
            By complete and correct handling properties

            <g
                id="__gsn__17ebba6943a"
                color="#ffffff"
                name="Complete Knowledge">
              All VCs are accounted for and either automatically discharged or noted by the Spark Ada tool as un-discharged.

              <a
                  id="__gsn__17ebba6943b"
                  color="#ffffff"
                  name="Assumption">
                Trusted SPARK Pro toolset outside of addressed and known bugs.
              </a>

              <e
                  id="__gsn__17ebba6943c"
                  color="#ffffff"
                  name="VC Difference Computation by Reader">
                Reader compares complete table of VCs from tooling mapped in "evidence-fre.xlsx#VCs#VS Satisfaction", compare with entries there not satisfied against "evidence-fre.xlsx#VCs#Undischarged VSs" list.
              </e>
            </g>

            <g
                id="__gsn__17ebba6943d"
                color="#ffffff"
                name="Non-discharged  VCs Adequately Addressed">
              All VCs not automatically discharged by the SPAR Ada tool are adequately addressed.

              <s
                  id="__gsn__17f091a74c7"
                  color="#ffffff"
                  name="Strategy">
                By Complete and Correct handling properties

                <g
                    id="__gsn__17ebba6943e"
                    color="#ffffff"
                    name="Complete Addressing of All Undischarged VCs">
                  All VCs that are not automatically discharged by the SPARK Pro tool have been sufficiently addressed.

                  <e
                      id="__gsn__17ebba6943f"
                      color="#ffffff"
                      name="Undischarged VC Table">
                    A table of all of the undischarged verification conditions generated for the source code and where the proof is performed or an argument has been created. See "evidence-fre.xlsx!VCs#Undischarged VCs".
                  </e>
                </g>

                <g
                    id="__gsn__17ebba69440"
                    color="#ffffff"
                    name="Addressing of Undischarged VCs Accepted">
                  Proofs and arguments provided from outside the SPARK Pro tool are accepted by domain experts and stakeholders.

                  <e
                      id="__gsn__17ebba69441"
                      color="#ffffff"
                      name="Outside VCs DIscharge Rational">
                    External proof and/or argument for why the VC is discharged outside the tool.See "evidence-fre.xlsx!VCs#Outside VS Discharge Rationale".
                  </e>

                  <e
                      id="__gsn__17ebba69442"
                      color="#ffffff"
                      name="Spark Pro VC Output Report">
                    The report produced by Spark Pro indicating generated VCs, errors, and undischarged VCs. See "evidence-fre.xlsx!VCs#VS Satisfaction".
                  </e>

                  <e
                      id="__gsn__17ebba69443"
                      color="#ffffff"
                      name="Sign-off on Undischarged VCs">
                    Sign-off from stakeholders and domain expert reviewers for each of the VCs with an external proof and/or argument in the VC sheet. See "evidence-fre.xlsx!VCs#Undischarged VC SIgn-Off".
                  </e>
                </g>
              </s>
            </g>
          </s>
        </public-goal>
      </s>
    </g>
  </gsn>
</argument>
